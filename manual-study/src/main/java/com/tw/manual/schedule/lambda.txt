https://mp.weixin.qq.com/s/toOosD7nKzqG0-95m6OMHg

lambda 格式
    (parameters)  ->  expression (参数) -> 表达式
    (parameters) -> {statements;}(参数) -> 语句
函数式接口
    一个接口如果只定义了一个抽象方法,即为函数式接口，就可以使
    用lambda表达式简化程序代码 lambda可以直接赋值给变量，也
    可以作为参数从传递给函数。
jdk1.8自定义函数式接口
    每次使用Lambda表达式之前都要定义各自的函数式编程接口，
    较为麻烦，jdk 1.8设计者使用泛型，定义了一整套函数式编程
    接口。
    Predicate 应用场景过滤
    Consumer 对对象进行处理
    Function 接收一个泛型T对象，返回一个泛型R对象
    Supplier<T> 适用于创建对象
    UnaryOperator<T> 一元运算符函数式接口，接收一个泛型T对
    象，同样返回一个泛型T对象。
jdk 1.8 类型检查 类型推断以及限制
    类型检测的步骤
        检查filter函数的参数列表得出lambda对应的参数类型
        根据参数类型获取对应的函数描述符
        验证lambda表达式是否符合函数描述符。
    类型推断
        java编译器能根据目标类型来推断出用什么函数式接口来
        配合lambda表达式。
复合lambda表达式
    比较器复合
    谓词复合
    函数复合
流stream
    数据流，元素序列，短暂定义：从支持数据处理操作的源生成的
    元素序列。例如集合，数组都是支持数据操作的数据结构--容器
    都可以作为流的创建源。
    核心要素：
        源：
            流是从一个支持数据处理的源创建而来
        元素序列
            流代表一个元素序列（流水线），根据一个数据处理
            源而创建得来的。
        数据处理操作
            流的侧重点不是数据存储，而在于数据处理。
        迭代方式
            流的迭代方式为内部迭代，集合的为外部迭代。
    常用操作：
        filter
            接收谓词Predicate，返回流 stream
        distinct
            对结果集去重
        limit
            截断流，返回一个i不超过指定元素个数的流
        skip
            跳过指定元素，返回剩余元素的流，与limit互补。
        Map
            可以只选择一个流中的某一列数据
        flatMap
            将两个stream合并成一个stream进行操作
        allMatch
            判断流中的所有元素是否与Predicate相匹配，只要其中一个元素不复合，该表达
            式将返回false
        anyMatch
            流中的元素至少一个匹配谓词，即返回真。
        noneMatch
            流中的元素全部不匹配谓词Predicate,则返回true。
        findFirst
            返回流中的一个元素。
        findAny
            返回流中任意一个元素。
        reduce
            规约，对流中所有的元素进行统计分析，规约成一个数值。
            注 ：java多线程编程模型中，引入了fork-join框架，就是对一个大的任务进行先拆解，
            用多线程分别并行执行，最终再两两进行合并，得出最终的结果。
        flatMap
            扁平化流，将多个流合并成一个流。
        sorted
            排序
        forEach
            遍历
        collect
            将流进行转换
        count
            返回流中元素个数
jdk 1.8 Collection 新特性
    stream()
        无存储，非数据结构，为视图。惰式执行，stream上的操作
        不会立即执行，而是用户真正需要结果时从才会执行。可消
        费性，stream只能被消费一次，一旦遍历过就失效。为函数
        式编程而生，对stram的任何修改都不会修改背后的数据源.
