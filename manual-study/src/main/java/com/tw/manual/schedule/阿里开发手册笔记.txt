编程规约：
	一，命名规则
		1.(强制)代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。
		2.(强制)类名使用 UpperCamelCase（驼峰命名法） 风格，但以下情形例外：DO / BO / DTO / VO / AO / PO 等
		3.(强制)常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。
		4.(强制)抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类名开始，以 Test 结尾。
		5.(强制)POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。
		6.(强制)包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。
		7.(强制)杜绝完全不规范的缩写，避免望文不知义。
		8.(推荐)为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意。
		9.(推荐)如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式。说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。
		10.(推荐)接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。
		11.(参考)枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。
		12.(参考)各层命名规约：
			A) Service/DAO 层方法命名规约
				1） 获取单个对象的方法用 get 作前缀。
				2） 获取多个对象的方法用 list 作前缀。
				3） 获取统计值的方法用 count 作前缀。
				4） 插入的方法用 save/insert 作前缀。
				5） 删除的方法用 remove/delete 作前缀。
				6） 修改的方法用 update 作前缀。
			B) 领域模型命名规约
				1） 数据对象：xxxDO，xxx 即为数据表名。
				2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。
				3） 展示对象：xxxVO，xxx 一般为网页名称。
				4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。
	    13.避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可读性降低
        14.为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意。
	    15.在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度。

	end--如果有一天我的任性伤害了你，你可不可以温柔提醒，我怕因此会错过你。
	
	二，常量定义
		1.(强制)不允许任何未经预先定义的常量直接出现在代码中。
		2.(强制)long 或者 Long 初始赋值时，使用大写的 L，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。
		3.(强制)不要使用一个常量类维护所有常量，按常量功能进行归类，分开维护。
		4.(参考)常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。
			1） 跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。
			2） 应用内共享常量：放置在一方库中，通常是子模块中的 constant 目录下。
			反例：易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：
			类 A 中：public static final String YES = "yes";
			类 B 中：public static final String YES = "y";
			A.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。
			3） 子工程内部共享常量：即在当前子工程的 constant 目录下。
			4） 包内共享常量：即在当前包下单独的 constant 目录下。
			5） 类内共享常量：直接在类内部 private static final 定义。
		5.(推荐)如果变量值仅在一个固定范围内变化用 enum 类型来定义。

	end--这世界上有一千种等待，最好的那一种叫做来日可期，我愿意站在这里，从这一秒开始倒数，等待多年后的相遇。
	
	三，代码格式
		1.(强制)大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行。
		2.(强制)左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格。
		3.(强制)if/for/while/switch/do 等保留字与括号之间都必须加空格。
		4.(强制)任何二目、三目运算符的左右两边都需要加一个空格。
		5.(强制)注释的双斜线与注释内容之间有且仅有一个空格。
		6.(强制)方法参数在定义和传入时，多个参数逗号后边必须加空格。
		7.(强制)不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。

	end--女孩子真是世界上最可爱的生物了 心软嘴硬除了宠着还能怎么办呢。
	
	四，OOP规约(Object Oriented Programming,OOP,面向对象程序设计)
		1.(强制)外部正在调用或者二方库依赖的接口，不允许修改方法签名（方法名和参数列表），避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。
		2.(强制)不能使用过时的类或方法。
		3.(强制)Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。
			正例："test".equals(object);
			反例：object.equals("test");
			说明：推荐使用 java.util.Objects.equals（JDK7 引入的工具类）
		4.(强制)关于基本数据类型与包装数据类型的使用标准如下：
			1） 所有的 POJO 类属性必须使用包装数据类型。
			2） RPC 方法的返回值和参数必须使用包装数据类型。
			3） 所有的局部变量使用基本数据类型。
			说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE 问题，或者入库检查，都由使用者来保证。
		5.(强制)构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。
		6.(强制)POJO 类必须写 toString 方法。使用 IDE 中的工具：source> generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。
			说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。
		7.(强制)使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。
			说明：
			String str = "a,b,c,,"; 
			String[] ary = str.split(","); 
			// 预期大于 3，结果是 3
		8.(强制)当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读。
		9.(强制)类内方法定义的顺序依次是：公有方法或保护方法 > 私有方法 > getter/setter方法。
		10.(强制)循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。
		11.(强制)慎用 Object 的 clone 方法来拷贝对象。
			说明：对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。
		12.(强制)类非 static 成员变量并且与子类共享，必须是 protected。
		13.(强制)类非 static 成员变量并且仅在本类使用，必须是 private。
		14.(强制)类 static 成员变量如果仅在本类使用，必须是 private。
		15.(强制)若是 static 成员变量，必须考虑是否为 final。
		16.(强制)类成员方法只供类内部调用，必须是 private。
		17.(强制)类成员方法只对继承类公开，那么限制为 protected。
		18.(强制)为了防止精度损失，禁止使用构造方法 BigDecimal(double)的方式把 double 值转化为 BigDecimal 对象。
            说明：BigDecimal(double)存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。
            如：BigDecimal g = new BigDecimal(0.1f); 实际的存储值为：0.10000000149
            正例：优先推荐入参为 String 的构造方法，或使用 BigDecimal 的 valueOf 方法，此方法内部其实执行了
            Double 的 toString，而 Double 的 toString 按 double 的实际能表达的精度对尾数进行了截断。
            BigDecimal recommend1 = new BigDecimal("0.1");
            BigDecimal recommend2 = BigDecimal.valueOf(0.1);

	end--就如同爱情，可要是不试，你又怎么知道那个人是不是最对的呢？
	
	五，集合处理
		1.(强制)只要重写 equals，就必须重写 hashCode。
		2.(强制)ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException 异常，即 java.util.RandomAccessSubList cannot be cast to java.util.ArrayList。
            说明：subList 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList 而是 ArrayList 的一个视图，对于 SubList 子列表的所有操作最终会反映到原列表上.
        3.(强制)使用 Map 的方法 keySet()/values()/entrySet()返回集合对象时，不可以对其进行添加元素操作，否则会抛出 UnsupportedOperationException 异常。
        4.(强制)Collections 类返回的对象，如：emptyList()/singletonList()等都是 immutablelist（不可变集合），不可对其进行添加或者删除元素的操作。
        5.(强制)在 subList 场景中，高度注意对原集合元素的增加或删除，均会导致子列表的遍历、增加、删除产生 ConcurrentModificationException 异常。
        6.(强制)使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一致、长度为 0 的空数组。
        7.(强制)在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行NPE 判断。
        8.(强制)使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。
            说明：asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList 体现的是适配器模式，只是转换接口，后台的数据仍是数组。
                String[] str = new String[] { "yang", "hao" };
                List list = Arrays.asList(str);
                第一种情况：list.add("yangguanbao"); 运行时异常。
                第二种情况：str[0] = "changed"; 也会随之修改，反之亦然。
        9.(强制)泛型通配符<? extends T>来接收返回的数据，此写法的泛型集合不能使用 add 方法，而<? super T>不能使用 get 方法，作为接口调用赋值时易出错。
            说明：扩展说一下 PECS(Producer Extends Consumer Super)原则：第一、频繁往外读取内容的，适合用<? extends T>。第二、经常往里插入的，适合用<? super T>
        10.(强制)在无泛型限制定义的集合赋值给泛型限制的集合时，在使用集合元素时，需要进行instanceof 判断，避免抛出 ClassCastException 异常。
            说明：毕竟泛型是在 JDK5 后才出现，考虑到向前兼容，编译器是允许非泛型集合与泛型集合互相赋值。
            反例：
                List<String> generics = null;
                List notGenerics = new ArrayList(10);
                notGenerics.add(new Object());
                notGenerics.add(new Integer(1));
                generics = notGenerics;
                // 此处抛出 ClassCastException 异常
                String string = generics.get(0);
        11.(强制)不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。
            正例：
            List<String> list = new ArrayList<>();
            list.add("1");
            list.add("2");
            Iterator<String> iterator = list.iterator();
            while (iterator.hasNext()) {
            String item = iterator.next();
            if (删除元素的条件) {
            iterator.remove();
            }
            }
            反例：
            for (String item : list) {
            if ("1".equals(item)) {
            list.remove(item);
            }
            }
            说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？
        12.(强制)在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort，
            Collections.sort 会抛 IllegalArgumentException 异常。
            说明：三个条件如下
                1） x，y 的比较结果和 y，x 的比较结果相反。
                2） x>y，y>z，则 x>z。
                3） x=y，则 x，z 比较结果和 y，z 比较结果相同。
                反例：下例中没有处理相等的情况，交换两个对象判断结果并不互反，不符合第一个条件，在实际使用中
                可能会出现异常。
                new Comparator<Student>() {
                @Override
                public int compare(Student o1, Student o2) {
                return o1.getId() > o2.getId() ? 1 : -1;
                }
                };
        13.(推荐)集合初始化时，指定集合初始值大小(默认16)
        14.(推荐)使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。
            说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应
            的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，
            使用 Map.forEach 方法。
            正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合
            对象；entrySet()返回的是 K-V 值组合集合。
        15.(推荐)高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：
               集合类 Key Value Super 说明
               Hashtable 不允许为 null 不允许为 null Dictionary 线程安全
               ConcurrentHashMap 不允许为 null 不允许为 null AbstractMap 锁分段技术（JDK8:CAS）
               TreeMap 不允许为 null 允许为 null AbstractMap 线程不安全
               HashMap 允许为 null 允许为 null AbstractMap 线程不安全
               反例：由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储null 值时会抛出 NPE 异常。
        16.(参考)合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。
            说明：有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次序是一定的。
            如：
                ArrayList 是 order/unsort；
                HashMap 是 unorder/unsort；
                TreeSet 是 order/sort。
        17.(参考)利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的contains 方法进行遍历、对比、去重操作

    end--快乐的方式有很多种，最直接的，就是见到你。

    六，并发处理
        1.(强制)获取单例对象需要保证线程安全，其中的方法也要保证线程安全。
            说明：资源驱动类、工具类、单例工厂类都需要注意
        2.(强制)创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。
            正例：自定义线程工厂，并且根据外部特征进行分组，比如机房信息。
            public class UserThreadFactory implements ThreadFactory {
                private final String namePrefix;
                private final AtomicInteger nextId = new AtomicInteger(1);
                // 定义线程组名称，在 jstack 问题排查时，非常有帮助
                UserThreadFactory(String whatFeaturOfGroup) {
                    namePrefix = "From UserThreadFactory's " + whatFeaturOfGroup + "-Worker-";
                }
                @Override
                public Thread newThread(Runnable task) {
                    String name = namePrefix + nextId.getAndIncrement();
                    Thread thread = new Thread(null, task, name, 0, false);
                    System.out.println(thread.getName());
                    return thread;
                }
            }
        3.(强制)线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。
            说明：线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。
        4.(强制)线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。
            说明：Executors 返回的线程池对象的弊端如下：
                1） FixedThreadPool 和 SingleThreadPool：
                    允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM（内存泄漏）。
                2） CachedThreadPool：
                    允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。
        5.(强制)SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为static，必须加锁，或者使用 DateUtils 工具类。
            正例：注意线程安全，使用 DateUtils。亦推荐如下处理：
                private static final ThreadLocal<DateFormat> df = new ThreadLocal<DateFormat>() {
                @Override
                    protected DateFormat initialValue() {
                        return new SimpleDateFormat("yyyy-MM-dd");
                    }
                };
            说明：如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，
                DateTimeFormatter 代替 SimpleDateFormat，官方给出的解释：simple beautiful strong immutable thread-safe。
        6.(强制)必须回收自定义的 ThreadLocal 变量，尤其在线程池场景下，线程经常会被复用，如果不清理自定义的 ThreadLocal 变量，可能会影响后续业务逻辑和造成内存泄露等问题。尽量在代理中使用 try-finally 块进行回收。
            正例：
                objectThreadLocal.set(userInfo);
                try {
                    // ...
                } finally {
                    objectThreadLocal.remove();
                }
        7.(强制)高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。
            说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。
        8.(强制)对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。
            说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是A、B、C，否则可能出现死锁。
        9.(强制)使用阻塞等待获取锁的方式中，必须在 try 代码块之外，并且在加锁方法与 try 代码块之间没有任何可能抛出异常的方法调用，避免加锁成功后，在 finally 中无法解锁。
            说明一：如果在 lock 方法与 try 代码块之间的方法调用抛出异常，那么无法解锁，造成其它线程无法成功获取锁。
            说明二：如果 lock 方法在 try 代码块之内，可能由于其它方法抛出异常，导致在 finally 代码块中，unlock 对未加锁的对象解锁，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），抛出IllegalMonitorStateException 异常。
            说明三：在 Lock 对象的 lock 方法实现中可能抛出 unchecked 异常，产生的后果与说明二相同。
            正例：
            Lock lock = new XxxLock();
            // ...
            lock.lock();
            try {
            doSomething();
            doOthers();
            } finally {
            lock.unlock();
            }
            反例：
            Lock lock = new XxxLock();
            // ...
            try {
            // 如果此处抛出异常，则直接执行 finally 代码块
            doSomething();
            // 无论加锁是否成功，finally 代码块都会执行
            lock.lock();
            doOthers();
            } finally {
            lock.unlock();
            }
        10.(强制)在使用尝试机制来获取锁的方式中，进入业务代码块之前，必须先判断当前线程是否持有锁。锁的释放规则与锁的阻塞等待方式相同。
            说明：Lock 对象的 unlock 方法在执行时，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），如果当前线程不持有锁，则抛出 IllegalMonitorStateException 异常。
            正例：
                Lock lock = new XxxLock();
                // ...
                boolean isLocked = lock.tryLock();
                if (isLocked) {
                    try {
                        doSomething();
                        doOthers();
                    } finally {
                        lock.unlock();
                    }
                }
        11.(强制)并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。
            说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于3 次。
        12.(强制)多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，如果在处理定时任务时使用ScheduledExecutorService 则没有这个问题
        13.(推荐)资金相关的金融敏感信息，使用悲观锁策略。
            说明：乐观锁在获得锁的同时已经完成了更新操作，校验逻辑容易出现漏洞，另外，乐观锁对冲突的解决策略有较复杂的要求，处理不当容易造成系统压力或数据异常，所以资金相关的金融敏感信息不建议使用乐观锁更新。
        14.(推荐)使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。
            说明：注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。
        15.(推荐)避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降。
            说明：Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。
            正例：在 JDK7 之后，可以直接使用 API ThreadLocalRandom，而在 JDK7 之前，需要编码保证每个线程持有一个实例。
        16.(推荐)在并发场景下，通过双重检查锁（double-checked locking）实现延迟初始化的优化问题隐患(可参考 The "Double-Checked Locking is Broken" Declaration)，推荐解决方案中较为简单一种（适用于 JDK5 及以上版本），将目标属性声明为 volatile 型。
           反例：
               public class LazyInitDemo {
                   private Helper helper = null;
                   public Helper getHelper() {
                   if (helper == null) synchronized(this) {
                    if (helper == null)
                   helper = new Helper();
                   }
                   return helper;
                   }
                   // other methods and fields...
               }
        17.(参考)volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。
           说明：如果是 count++操作，使用如下类实现：AtomicInteger count = new AtomicInteger(); count.addAndGet(1); 如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。
        18.(参考)HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险。
            说明：hashmap resize 扩容时调用 transfer方法 指针 e next
        19.(参考)ThreadLocal 对象使用 static 修饰，ThreadLocal 无法解决共享对象的更新问题。
            说明：这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。

    end--你是我患得患失的梦，我是你可有可无的人。毕竟这穿越山河的箭，刺的都是用情至疾的人。

    七，控制语句
        1.(强制)当 switch 括号内的变量类型为 String 并且此变量为外部参数时，必须先进行 null判断。
        2.(强制)在高并发场景中，避免使用”等于”判断作为中断或退出的条件。
            说明：如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。
            反例：判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，这样的话，活动无法终止。
        3.(强制)不要在其它表达式（尤其是条件表达式）中，插入赋值语句。
            说明：赋值点类似于人体的穴位，对于代码的理解至关重要，所以赋值语句需要清晰地单独成为一行。
            反例：
                public Lock getLock(boolean fair) {
                    // 算术表达式中出现赋值操作，容易忽略 count 值已经被改变
                    threshold = (count = Integer.MAX_VALUE) - 1;
                    // 条件表达式中出现赋值操作，容易误认为是 sync==fair
                    return (sync = fair) ? new FairSync() : new NonfairSync();
                }
        4.(强制)循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 try-catch 操作（这个 try-catch 是否可以移至循环体外）。
        5.(强制)避免采用取反逻辑运算符。
            说明：取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。
        6.(强制)下列情形，需要进行参数校验：
            1） 调用频次低的方法。
            2） 执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。
            3） 需要极高稳定性和可用性的方法。
            4） 对外提供的开放接口，不管是 RPC/API/HTTP 接口。
            5） 敏感权限入口。
        7.(强制)下列情形，不需要进行参数校验：
            1） 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。
            2） 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。
            3） 被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。

    end--“睡眠的拼音是什么”“shuimian”“失眠的拼音是什么”“shimian”“它们有什么区别”“你会懂的”

    八，异常处理
        1.(强制)异常不要用来做流程控制，条件控制。
            说明：异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。
        2.(强制)catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。
            说明：对大段代码进行 try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题，这是一种不负责任的表现。
            正例：用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。
        3.(强制)捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。
        4.(强制)有 try 块放到了事务代码中，catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。
        5.(强制)finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。
            说明：如果 JDK7 及以上，可以使用 try-with-resources 方式。
        6.(强制)不要在 finally 块中使用 return。
            说明：try 块中的 return 语句执行成功后，并不马上返回，而是继续执行 finally 块中的语句，如果此处存在 return 语句，则在此直接返回，无情丢弃掉 try 块中的返回点。
            反例：
                private int x = 0;
                public int checkReturn() {
                    try {
                        // x 等于 1，此处不返回
                        return ++x;
                    } finally {
                        // 返回的结果是 2
                        return ++x;
                    }
                }
        7.在调用 RPC、二方包、或动态生成类的相关方法时，捕捉异常必须使用 Throwable类来进行拦截。
            说明：通过反射机制来调用方法，如果找不到方法，抛出 NoSuchMethodException。什么情况会抛出NoSuchMethodError 呢？二方包在类冲突时，仲裁机制可能导致引入非预期的版本使类的方法签名不匹配，或者在字节码修改框架（比如：ASM）动态创建或修改类时，修改了相应的方法签名。这些情况，即使代码编译期是正确的，但在代码运行期时，会抛出 NoSuchMethodError。
        8.方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。
            说明：本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回 null 的情况。
        9.防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：
            1）返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。
                反例：public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。
            2）数据库的查询结果可能为 null。
            3）集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。
            4）远程调用返回对象时，一律要求进行空指针判断，防止 NPE。
            5）对于 Session 中获取的数据，建议进行 NPE 检查，避免空指针。
            6）级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。
                正例：使用 JDK8 的 Optional 类来防止 NPE 问题。
        10.避免出现重复的代码（Don't Repeat Yourself），即 DRY 原则。
            说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。
            正例：一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：
            private boolean checkParam(DTO dto) {...}

    end--我一直都在关注你 以你知道或者不知道的方式

    九，日志规约
        1.对于 trace/debug/info 级别的日志输出，必须进行日志级别的开关判断。
            说明：虽然在 debug(参数)的方法体内第一行代码 isDisabled(Level.DEBUG_INT)为真时（Slf4j 的常见实现 Log4j 和 Logback），就直接 return，但是参数可能会进行字符串拼接运算。此外，如果debug(getName())这种参数内有 getName()方法调用，无谓浪费方法调用的开销。
            正例：// 如果判断为真，那么可以输出 trace 和 debug 级别的日志
            if (logger.isDebugEnabled()) {
                logger.debug("Current ID is: {} and name is: {}", id, getName());
            }