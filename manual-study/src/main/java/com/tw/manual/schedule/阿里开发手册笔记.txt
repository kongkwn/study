编程规约：
	一，命名规则
		1.(强制)代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。
		2.(强制)类名使用 UpperCamelCase（驼峰命名法） 风格，但以下情形例外：DO / BO / DTO / VO / AO / PO 等
		3.(强制)常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。
		4.(强制)抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类名开始，以 Test 结尾。
		5.(强制)POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。
		6.(强制)包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。
		7.(强制)杜绝完全不规范的缩写，避免望文不知义。
		8.(推荐)为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意。
		9.(推荐)如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式。说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。
		10.(推荐)接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。
		11.(参考)枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。
		12.(参考)各层命名规约：
			A) Service/DAO 层方法命名规约
				1） 获取单个对象的方法用 get 作前缀。
				2） 获取多个对象的方法用 list 作前缀。
				3） 获取统计值的方法用 count 作前缀。
				4） 插入的方法用 save/insert 作前缀。
				5） 删除的方法用 remove/delete 作前缀。
				6） 修改的方法用 update 作前缀。
			B) 领域模型命名规约
				1） 数据对象：xxxDO，xxx 即为数据表名。
				2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。
				3） 展示对象：xxxVO，xxx 一般为网页名称。
				4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。
	    13.避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可读性降低
        14.为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意。
	    15.在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度。

	end--如果有一天我的任性伤害了你，你可不可以温柔提醒，我怕因此会错过你。
	
	二，常量定义
		1.(强制)不允许任何未经预先定义的常量直接出现在代码中。
		2.(强制)long 或者 Long 初始赋值时，使用大写的 L，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。
		3.(强制)不要使用一个常量类维护所有常量，按常量功能进行归类，分开维护。
		4.(参考)常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。
			1） 跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。
			2） 应用内共享常量：放置在一方库中，通常是子模块中的 constant 目录下。
			反例：易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：
			类 A 中：public static final String YES = "yes";
			类 B 中：public static final String YES = "y";
			A.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。
			3） 子工程内部共享常量：即在当前子工程的 constant 目录下。
			4） 包内共享常量：即在当前包下单独的 constant 目录下。
			5） 类内共享常量：直接在类内部 private static final 定义。
		5.(推荐)如果变量值仅在一个固定范围内变化用 enum 类型来定义。

	end--这世界上有一千种等待，最好的那一种叫做来日可期，我愿意站在这里，从这一秒开始倒数，等待多年后的相遇。
	
	三，代码格式
		1.(强制)大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行。
		2.(强制)左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格。
		3.(强制)if/for/while/switch/do 等保留字与括号之间都必须加空格。
		4.(强制)任何二目、三目运算符的左右两边都需要加一个空格。
		5.(强制)注释的双斜线与注释内容之间有且仅有一个空格。
		6.(强制)方法参数在定义和传入时，多个参数逗号后边必须加空格。
		7.(强制)不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。

	end--女孩子真是世界上最可爱的生物了 心软嘴硬除了宠着还能怎么办呢。
	
	四，OOP规约(Object Oriented Programming,OOP,面向对象程序设计)
		1.(强制)外部正在调用或者二方库依赖的接口，不允许修改方法签名（方法名和参数列表），避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。
		2.(强制)不能使用过时的类或方法。
		3.(强制)Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。
			正例："test".equals(object);
			反例：object.equals("test");
			说明：推荐使用 java.util.Objects.equals（JDK7 引入的工具类）
		4.(强制)关于基本数据类型与包装数据类型的使用标准如下：
			1） 所有的 POJO 类属性必须使用包装数据类型。
			2） RPC 方法的返回值和参数必须使用包装数据类型。
			3） 所有的局部变量使用基本数据类型。
			说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE 问题，或者入库检查，都由使用者来保证。
		5.(强制)构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。
		6.(强制)POJO 类必须写 toString 方法。使用 IDE 中的工具：source> generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。
			说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。
		7.(强制)使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。
			说明：
			String str = "a,b,c,,"; 
			String[] ary = str.split(","); 
			// 预期大于 3，结果是 3
		8.(强制)当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读。
		9.(强制)类内方法定义的顺序依次是：公有方法或保护方法 > 私有方法 > getter/setter方法。
		10.(强制)循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。
		11.(强制)慎用 Object 的 clone 方法来拷贝对象。
			说明：对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。
		12.(强制)类非 static 成员变量并且与子类共享，必须是 protected。
		13.(强制)类非 static 成员变量并且仅在本类使用，必须是 private。
		14.(强制)类 static 成员变量如果仅在本类使用，必须是 private。
		15.(强制)若是 static 成员变量，必须考虑是否为 final。
		16.(强制)类成员方法只供类内部调用，必须是 private。
		17.(强制)类成员方法只对继承类公开，那么限制为 protected。
		18.(强制)为了防止精度损失，禁止使用构造方法 BigDecimal(double)的方式把 double 值转化为 BigDecimal 对象。
            说明：BigDecimal(double)存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。
            如：BigDecimal g = new BigDecimal(0.1f); 实际的存储值为：0.10000000149
            正例：优先推荐入参为 String 的构造方法，或使用 BigDecimal 的 valueOf 方法，此方法内部其实执行了
            Double 的 toString，而 Double 的 toString 按 double 的实际能表达的精度对尾数进行了截断。
            BigDecimal recommend1 = new BigDecimal("0.1");
            BigDecimal recommend2 = BigDecimal.valueOf(0.1);

	就如同爱情，可要是不试，你又怎么知道那个人是不是最对的呢？
	
	五，集合处理
		1.(强制)只要重写 equals，就必须重写 hashCode。
		2.(强制)ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException 异常，即 java.util.RandomAccessSubList cannot be cast to java.util.ArrayList。
            说明：subList 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList 而是 ArrayList 的一个视图，对于 SubList 子列表的所有操作最终会反映到原列表上.
        3.(强制)使用 Map 的方法 keySet()/values()/entrySet()返回集合对象时，不可以对其进行添加元素操作，否则会抛出 UnsupportedOperationException 异常。
        4.(强制)Collections 类返回的对象，如：emptyList()/singletonList()等都是 immutablelist（不可变集合），不可对其进行添加或者删除元素的操作。
        5.(强制)在 subList 场景中，高度注意对原集合元素的增加或删除，均会导致子列表的遍历、增加、删除产生 ConcurrentModificationException 异常。
        6.(强制)使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一致、长度为 0 的空数组。
        7.(强制)在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行NPE 判断。
        8.(强制)使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。
            说明：asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList 体现的是适配器模式，只是转换接口，后台的数据仍是数组。
                String[] str = new String[] { "yang", "hao" };
                List list = Arrays.asList(str);
                第一种情况：list.add("yangguanbao"); 运行时异常。
                第二种情况：str[0] = "changed"; 也会随之修改，反之亦然。
        9.(强制)泛型通配符<? extends T>来接收返回的数据，此写法的泛型集合不能使用 add 方法，而<? super T>不能使用 get 方法，作为接口调用赋值时易出错。
            说明：扩展说一下 PECS(Producer Extends Consumer Super)原则：第一、频繁往外读取内容的，适合用<? extends T>。第二、经常往里插入的，适合用<? super T>
        10.(强制)在无泛型限制定义的集合赋值给泛型限制的集合时，在使用集合元素时，需要进行instanceof 判断，避免抛出 ClassCastException 异常。
            说明：毕竟泛型是在 JDK5 后才出现，考虑到向前兼容，编译器是允许非泛型集合与泛型集合互相赋值。
            反例：
                List<String> generics = null;
                List notGenerics = new ArrayList(10);
                notGenerics.add(new Object());
                notGenerics.add(new Integer(1));
                generics = notGenerics;
                // 此处抛出 ClassCastException 异常
                String string = generics.get(0);
        11.(强制)不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。
            正例：
            List<String> list = new ArrayList<>();
            list.add("1");
            list.add("2");
            Iterator<String> iterator = list.iterator();
            while (iterator.hasNext()) {
            String item = iterator.next();
            if (删除元素的条件) {
            iterator.remove();
            }
            }
            反例：
            for (String item : list) {
            if ("1".equals(item)) {
            list.remove(item);
            }
            }
            说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？
        12.(强制)在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort，
            Collections.sort 会抛 IllegalArgumentException 异常。
            说明：三个条件如下
                1） x，y 的比较结果和 y，x 的比较结果相反。
                2） x>y，y>z，则 x>z。
                3） x=y，则 x，z 比较结果和 y，z 比较结果相同。
                反例：下例中没有处理相等的情况，交换两个对象判断结果并不互反，不符合第一个条件，在实际使用中
                可能会出现异常。
                new Comparator<Student>() {
                @Override
                public int compare(Student o1, Student o2) {
                return o1.getId() > o2.getId() ? 1 : -1;
                }
                };
        13.(推荐)集合初始化时，指定集合初始值大小(默认16)
        14.(推荐)使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。
            说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应
            的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，
            使用 Map.forEach 方法。
            正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合
            对象；entrySet()返回的是 K-V 值组合集合。
        15.(推荐)高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：
               集合类 Key Value Super 说明
               Hashtable 不允许为 null 不允许为 null Dictionary 线程安全
               ConcurrentHashMap 不允许为 null 不允许为 null AbstractMap 锁分段技术（JDK8:CAS）
               TreeMap 不允许为 null 允许为 null AbstractMap 线程不安全
               HashMap 允许为 null 允许为 null AbstractMap 线程不安全
               反例：由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储null 值时会抛出 NPE 异常。
        16.(参考)合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。
            说明：有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次序是一定的。
            如：
                ArrayList 是 order/unsort；
                HashMap 是 unorder/unsort；
                TreeSet 是 order/sort。
        17.(参考)利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的contains 方法进行遍历、对比、去重操作

    快乐的方式有很多种，最直接的，就是见到你。